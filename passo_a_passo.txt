1.1)
>rails new social_networking -d postgresql

gem 'devise'
>bundle install

>rails g devise:install
configs da devise

>rails g devise admin

>rails db:drop
>rails db:create

1.2)

>rails db:migrate

gem 'rspec-rails', '~>5.0.0'
>bundle install

>rails g rspec:install

>rails g rspec:model admin

criação de testes:
  it "admin is valid" do
    admin = Admin.new(email:'admin@admin.com', password:'123456')
    expect(admin.email).to eql 'admin@admin.com'
    expect(admin).to be_valid
  end

  it "admin is not valid" do
    admin = Admin.new(email:'admin@admin.com')
    expect(admin).to_not be_valid
  end

1.3)

cria as views especificadas da devise
>rails g devise:views -v registrations sessions

troca a view device/sessions/new pela do git hub do professor
adiciona as imagens do git hub do professor
estiliza a view application.html.erb:
  <html style="height: 100%">
  <body style="height: 100%">

1.4)

no db/seeds.rb
  Admin.create(email:'admin@admin.com', password:'123456')
  puts "admin created"
>rails db:seed

altero application.html.erb 
  <body style="height: 100%">
    <%= notice %>
    <%= alert %>
    <%= content_for?(:content) ? yield(:content) : yield %>
  </body>

adiciono a view admin.html.erb em layouts pelo git hub do professor
  <% content_for :content do %>
    <%= render "layouts/admin/header" %>
    <div class="container mt-5">
      <%= yield %>
    </div>
  <% end %>
  <%= render template: "layouts/application" %>

criar admin_controller.rb
  class AdminController < ApplicationController

    before_action :authenticate_admin

    def authenticate_admin
      redirect_to new_admin_session_path unless current_admin?
    end

    def current_admin? # ? -> retorna um booleano
      if current_admin.present?
        true
      else
        false
      end
    end

  end

1.5 e 1.6)

routes

  Rails.application.routes.draw do
    devise_for :admins, skip: [:registrations], controllers: {sessions: 'admins/sessions' }
    # For details on the DSL available within this file, see https://guides.rubyonrails.org/routing.html
    
    namespace :admin do
      #admin/posts
      root to: "home#index"
    end
    
  end

-cria controllers/admin/home_controller.rb
  class Admin::HomeController < AdminController
    def index
    end
  end

-cria controllers/admins/sessions_controller.rb
  class Admins::SessionsController < Devise::SessionsController

    def after_sign_out_path_for(admin)
      new_admin_session_path
    end

  end

-cria views/admin/home/index.html.erb
  <h2>Seja bem-vindo ao painel administrativo</h2>

-cria views/layouts/admin/_header.html.erb
  <nav class="navbar navbar-expand-sm bg-dark navbar-dark">
    <div class="container">
      <ul class="navbar-nav">
        <li class="nav-item <%= current_page?(admin_root_path)? "active" : "" %>">
          <%= link_to("Home", admin_root_path, class: "nav-link") %>
        </li>
        <li class="nav-item <%= current_page?(admin_root_path)? "active" : "" %>">
          <%= link_to("Administradores", admin_root_path, class: "nav-link") %>
        </li>
        <li class="nav-item <%= current_page?(admin_root_path)? "active" : "" %>">
          <%= link_to("Usuários", admin_root_path, class: "nav-link") %>
        </li>
        <li class="nav-item <%= current_page?(admin_root_path)? "active" : "" %>">
          <%= link_to("Posts", admin_root_path, class: "nav-link") %>
        </li>
        
      </ul>
      <div class="nav-item d-flex">
        <ul class="navbar-nav">
          <li class="nav-item">
            <div class="py-2 mr-4" style="color:#fff;"><%= current_admin.email %></div>
          </li>
          <li class="nav-item">
            <%= link_to("Sair", destroy_admin_session_path, method: :delete, class: "nav-link")%>
          </li>
        </ul>
      </div>
    </div>
  </nav>

2.1)
user: <%= ENV.fetch("USER_PG") %>
password: <%= ENV.fetch("PASSWORD_PG") %>
port: 5432

-acrescentar em config/environments/production.rb
# Do not fallback to assets pipeline if a precompiled asset is missed.
  config.assets.compile = true
  config.serve_static_assets = true

>heroku apps:create dio-social-networking
>heroku buildpacks:add heroku/nodejs
>heroku buildpacks:add heroku/ruby 
>git push heroku main
>heroku run rails db:migrate
>heroku run rails db:seed


routes.rb
  namespace :admin do
    #admin/posts
    root to: "home#index"
    resources :admins
  end

criou migration para add name à tabela admins
  >rails g migration add_name_to_admins

  class AddNameToAdmins < ActiveRecord::Migration[6.1]
    def change
      add_column :admins, :name, :string
    end
  end

  >rails db:migrate

-atualiza os testes, acrescentando name, pois passou a ser obrig, pelo validates do model

  it "admin is valid" do
    admin = Admin.new(name: "Admin First", email:'admin@admin.com', password:'123456')

    expect(admin.email).to eql 'admin@admin.com'
    expect(admin).to be_valid
  end

-adiciona validates no models admin

  validates :name, presence: true

-cria controllers/admin/admins_controller.rb
  class Admin::AdminsController < AdminController
    def index
      @admins = Admin.all
    end
  end

-cria a view views/admin/admins/index.html.erb
  <h4>Admins</h4><br>

  <table class="table table-dark">
    <thead>
      <tr>
        <th scope="col">#</th>
        <th scope="col">Nome</th>
        <th scope="col">E-mail</th>
        <th scope="col">Criado em</th>
      </tr>
    </thead>
    <tbody>
    <% @admins.each do |admin| %>
      <tr>
        <th scope="row"><%= admin.id %></th>
        <td><%= admin.name %></td>
        <td><%= admin.email %></td>
        <td><%= admin.created_at %></td>
      </tr>  
    <% end %>
    </tbody>
  </table>

2.2)
  <li class="nav-item <%= current_page?(admin_admins_path)? "active" : "" %>">
    <%= link_to("Administradores", admin_admins_path, class: "nav-link") %>
  </li>

2.3)

- admins_controller.rb
  def new
    @admin = Admin.new
  end

  private 

  def form_params
    params.require(:admin).permit(:name, :email, :password, :password_confirmation)
  end

- views/admin/admins/index.html.erb
<%= link_to 'New Admin', new_admin_admin_path, class: 'btn btn-link' %>

-criar views/admin/admins/_form.html.erb
<div class="card" style="background-color:#f6f6f6;">
  <div class="card-body">
    <%= form_with(model: [:admin, admin], local: true) do |f| %>
      <div class="form-group">
        <%= f.label :name %>
        <%= f.text_field :name , class: 'form-control'%>
      </div>
      <div class="form-group">
        <%= f.label :email %>
        <%= f.email_field :email , class: 'form-control'%>
      </div>
      <div class="form-row">
        <div class="col-6">
            <div class="form-group">
                <%= f.label :password %>
                <%= f.password_field :password , class: 'form-control'%>
            </div>
        </div>
        <div class="col-6">
            <div class="form-group">
                <%= f.label :password_confirmation %>
                <%= f.password_field :password_confirmation , class: 'form-control'%>
            </div>
        </div>
      </div>
      <button type="submit" class="btn btn-primary">Salvar</button>
    <% end %>      
  </div>
</div>

-criar views/admin/admins/new.html.erb
<h2>Novo Administrador</h2>

<%= render 'form', admin: @admin %>

2.4)

-controllers/admin/admins_controller.rb
  def create
    @admin = Admin.new(form_params)

    if @admin.save
      redirect_to admin_admins_path
    else
      render :new
    end
  end

  def edit
    @admin = Admin.find(params[:id])
  end

-views/admin/admins/_form.html.erb
  #colocado dentro do form
  <%= render 'layouts/form_errors', record: admin%> 

- views/admin/admins/index.html.erb

  # acrescenta uma coluna na tabela
  <td><%= link_to 'Editar', edit_admin_admin_path(admin), class: 'btn btn-warning btn-sm' %></td>

- cria views/admin/admins/edit.html.erb
  <h2>Editar Administrador #<%= @admin.id %></h2>
  <%= render 'form', admin: @admin %>

- cria views/layouts/_form_errors.html.erb
  # cria essa partial que é colocada dentro do _form
  <% if record && record.errors.any? %>
    <div class="alert alert-danger" role="alert">
      <h4 class="alert-heading"><%= t('.error_on_save') %></h4>
      <ul>
      <% record.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

3.5) deletar admin

- controllers/admin/admins_controller.rb
  def update
    @admin = Admin.find(params[:id])
    params = form_params.to_h

    # se password não preenchido
    params = params.except!(:password, :password_confirmation) if params[:password].blank?
    
    if @admin.update(params)
      redirect_to admin_admins_path
    else
      render :edit
    end
  end

  def destroy
    @admin = Admin.find(params[:id])
    @admin.destroy
    redirect_to admin_admins_path
  end

- views/admin/admins/_form.html.erb
  # após o button de submit
  <%= link_to 'Voltar', admin_admins_path, class: 'btn btn-secondary ml-3' %>

- views/admin/admins/index.html.erb

  # adiciona mais uma coluna
  <td><%= link_to 'Deletar', admin_admin_path(admin), method: :delete, data: {confirm:"Are you sure?"}, class: 'btn btn-danger btn-sm' %></td>

3.6.a)
- controllers/admin/admins_controller.rb
  # refatoração, para retirar código repetido
  before_action :set_admin, only:[:edit, :update, :destroy]

  def edit
    # @admin = Admin.find(params[:id])
    # executada pelo set_admin via before_action
  end

  def update
    # @admin = Admin.find(params[:id])
    # executada pelo set_admin via before_action

    params = form_params.to_h
    params = params.except!(:password, :password_confirmation) if params[:password].blank?
    
    if @admin.update(params)
      redirect_to admin_admins_path
    else
      render :edit
    end
  end

  def destroy
    # @admin = Admin.find(params[:id])
    # executada pelo set_admin via before_action
    
    @admin.destroy
    redirect_to admin_admins_path
  end

  private
  def set_admin
    @admin = Admin.find(params[:id])
  end

4.1)

- Procfile
# reinicia o servidor remoto
web: bundle exec puma -C config/puma.rb

# faz as migrações
release: bundle exec rake db:migrate

- app/assets/images/test-avatar.png
- spec/support/test-avatar.png

>rais g devise user
cria o model e os tests no rspec
>rails g migration add_fields_to_users
>rails db:migrate

>rails active_storage:install
>rails db:migrate

- app/models/user.rb
  validates :phone, :name, :avatar, presence: true
  has_one_attached :avatar

- spec/rails_helper.rb 
  # no final do arquivo, após o end
  class Rack::Test::UploadedFile
    attr_reader :headers
  end

4.2) testes do model user

- testes do user
- spec/models/user_spec.rb

  it "user is valid" do
    user = User.new(
      name: 'Alisson',
      email: 'alisson@mail.com',
      phone: '999876543',
      avatar: fixture_file_upload(Rails.root.join("spec","support","test-avatar.png"), "image/png"),
      password: "123456"
    )

    expect(user).to be_valid
  end

  it "user is not valid" do
    user = User.new(
      name: 'Alisson',
      email: 'alisson@mail.com',
      phone: '999876543',
      password: "123456"
    )

    expect(user).to_not be_valid
  end

  it "user should have a name" do
    user = User.new(
      
      email: 'alisson@mail.com',
      phone: '999876543',
      password: "123456",
      avatar: fixture_file_upload(Rails.root.join("spec","support","test-avatar.png"), "image/png")
    )

    expect(user).to_not be_valid
  end

4.3) FactoryBot

- gemfile
  gem 'factory_bot_rails'
>bundle install

- criar spec/factories/users.rb
FactoryBot.define do
  factory :user do
    name { 'Alisson'}
    email {'alisson@mail.com'}
    phone {'999876543'}
    avatar {Rack::Test::UploadedFile.new(Rails.root.join("spec/support/test-avatar.png"), "image/png")}
    password {"123456"}
  end
end

Obs. Não consegui executar o FactoryBot no rails c, mas consegui no rspec

4.4)
- acrescentei: assets/images/login_bg2.jpeg

- alterei views/devise/sessions/new.html.erb
# para funcionar com user e admin, mas layouts diferentes do mesmo arquivo

#1
<div style="height: 100%!important;background-image: url('<%= resource_name == :admin ? image_path('login_bg.jpg') : image_path('login_bg2.jpg') %>'); background-size: cover">  

#9
<% if resource_name == :admin  %>
  <h5 class="text-center text-muted font-weight-normal mb-4">Acesso ao Painel Administrativo</h5>
<% end %>

#31
<% if resource_name == :user %>
  <%= link_to new_user_registration_path, class: 'd-flex justify-content-center align-items-center mt-4' do %>
    Cadastrar
  <% end %>
<% end %> 

5.1) Area privada do usuario na rede social

- app/models/user.rb ->tirei avatar para poder fazer um cadastro
# validates :phone, :name, :avatar, presence: true
  validates :phone, :name, presence: true

- routes.rb
  root to: "user/timeline#index"

  namespace :user do

  end

- app/controllers/user/timeline_controller
class User::TimelineController < UserController
    def index     
    end
end

- app/controllers/user_controller.rb
class UserController < ApplicationController
  before_action :authenticate_user

  def authenticate_user
    redirect_to new_user_session_path unless current_user
  end
end

- app/views/layouts/user.html.erb
<% content_for :content do %>
  <%= render "layouts/user/header" %>
  <div class="container mt-5">
    <%= yield %>
  </div>
<% end %>
<%= render template: "layouts/application" %>

- app/views/layouts/user/_header.html.erb
<nav class="navbar navbar-expand-sm bg-primary navbar-dark" style="background-color:#000080!important;">
  <div class="container" >
    <%= image_tag("logo.png", alt: "logo", class: 'navbar-brand', style: "height:40px;")%>
    <ul class="navbar-nav">
      <li class="nav-item <%= current_page?(root_path)? "active" : "" %>">
        <%= link_to("Timeline", root_path, class: "nav-link") %>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="#">Followers</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="#">Following</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="#">Quem eu posso seguir</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="#">Meu perfil</a>
      </li>
    </ul>
    <div class="nav-item d-flex">
      <ul class="navbar-nav">
        <li class="nav-item">
          <div class="py-2 mr-4" style="color:#fff;"><%= current_user.email %></div>
        </li>
        <li class="nav-item">
          <%= link_to("Sair", destroy_user_session_path, method: :delete, class: "nav-link")%>          
        </li>
      </ul>
    </div>
  </div>
</nav>

- app/views/user/timeline/index.html.erb
<h2>Seja bem-vindo à timeline</h2>

6.1)

- app/views/devise/registrations/new.html.erb
# altera para ser relativo a usuário e possuir os outros campos
# que foram acrescentados
<div style="height: 150%!important;background-image: url('<%= image_path('login_bg2.jpg') %>'); background-size: cover">
  <div class="offset-4 col-4 authentication-inner py-5">
    <div class="card">
      <div class="p-4 p-sm-5">
        <div class="d-flex justify-content-center align-items-center pb-2 mb-4">
          <%= image_tag('logo', style: 'height: 90px;') %>
        </div>

        <% if alert %>
          <div class="d-flex justify-content-center">
            <p class="text-danger"><%= alert %></p>
          </div>
        <% end %>
        <%= form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f| %>
          <%= render 'layouts/form_errors', record: resource %>
          <div class="form-group">
            <%= f.label :name, class: 'form-label' %>
            <%= f.text_field :name, autofocus: true, autocomplete: "name", class:" form-control" %>
          </div>
          <div class="form-group">
            <%= f.label :phone, class: 'form-label' %>
            <%= f.text_field :phone, autofocus: true, autocomplete: "phone", class:" form-control" %>
          </div>
          <div class="form-group">
            <%= f.label :avatar, class: 'form-label' %>
            <%= f.file_field(:avatar) %>
          </div>
          <div class="form-group">
            <%= f.label :email, class: 'form-label' %>
            <%= f.email_field :email, autofocus: true, autocomplete: "email", class:" form-control" %>
          </div>
          <div class="form-group">
            <%= f.label :password, class: 'form-label' %>
            <%= f.password_field :password, autocomplete: "current-password", class: "form-control" %>
          </div>
          <div class="d-flex justify-content-center align-items-center m-0">
            <%= f.submit 'Entrar', class: "btn btn-primary" %>
          </div>
        <% end %>        
        <%= link_to new_user_registration_path, class: 'd-flex justify-content-center align-items-center mt-4' do %>
          Cadastrar
        <% end %>         
      </div>
    </div>
  </div>
</div>

6.2) 

- app/models/user.rb
  validates :phone, :name, :avatar, presence: true


- app/views/devise/registrations/new.html.erb
<%= link_to new_user_session_path, class: 'd-flex justify-content-center align-items-center mt-4' do %>
  Login
<% end %>

- config/routes.rb
  devise_for :users, controllers: {registrations: 'users/registrations' } 

- app/controllers/users/registrations_controller.rb
  class Users::RegistrationsController < Devise::RegistrationsController
    before_action :configure_sign_up_params

    protected
    def configure_sign_up_params
      devise_parameter_sanitizer.permit(:sign_up, keys: [:phone, :name, :avatar])
    end
  end

6.3)

- views/layouts/admin/_header.html.erb ->ajustando aba Usuários
<li class="nav-item <%= current_page?(admin_users_path)? "active" : "" %>">
  <%= link_to("Usuários", admin_users_path, class: "nav-link") %>
</li>

- config/routes.rb
namespace :admin do
  #admin/posts
  root to: "home#index"
  resources :admins
  resources :users, only: :index
end

- criar controllers/admin/users_controller.rb
class Admin::UsersController < AdminController    
  
  def index
    @users = User.order(id: :desc)
  end
end

- criar views/admin/users/index.html.erb
<h4>Usuários</h4><br>

<table class="table table-dark">
  <thead>
    <tr>
      <th scope="col">#</th>
      <th scope="col">Foto</th>
      <th scope="col">Nome</th>
      <th scope="col">E-mail</th>
      <th scope="col">Telefone</th>
      <th scope="col">Criado em</th>
    </tr>
  </thead>
  <tbody>
  <% @users.each do |user| %>
    <tr>
      <th scope="row"><%= user.id %></th>
      <td><%= image_tag(user.avatar, class: 'ui-w-100-forced rounded-circle', style: 'width: 30px; height: 30px') %></td>
      <td><%= user.name %></td>
      <td><%= user.email %></td>
      <td><%= user.phone %></td>
      <td><%= user.created_at.strftime("%d/%m/%Y %H:%M") %></td>
    </tr>  
  <% end %>
  </tbody>
</table>

6.4) deploy no gituhub e no heroku - ok o funcionamento

7.1)

- criar migration
>rails g migration create_posts

- db/migrate/20210422175745_create_posts.rb
class CreatePosts < ActiveRecord::Migration[6.1]
  def change
    create_table :posts do |t|
      t.string :body
      t.references :user, foreign_key: true
      
      t.timestamps
    end
  end
end

>rails db:migrate

- criar model Post:  app/models/post.rb
class Post < ApplicationRecord
  
  belongs_to :user
end

- criar factory para testes: spec/factories/post.rb
FactoryBot.define do
  factory :post do
    body { 'Lorem ipsum dolor sit amet, consectetur adipiscing elit,
    sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
    Ut enim ad minim veniam.'}
  end
end

- criar testes: spec/models/post_spec.rb
require 'rails_helper'

RSpec.describe Post, type: :model do
  it "post is valid" do
    post = FactoryBot.build(:post)

    expect(post).to_not be_valid

    post.user = FactoryBot.build(:user)
    post.save

    expect(post).to be_valid
  end

  it "post belongs to user" do
    user = FactoryBot.create(:user)
    post = FactoryBot.create(:post, user: user)

    expect(post.user).to eql user
  end

  it "user has many posts" do
    user = FactoryBot.create(:user)
    post = FactoryBot.create(:post, user: user)

    expect(user.posts).to include post
  end
end

7.2)
- app/views/layouts/user/_header.html.erb
# link para a aba MEu perfil
<li class="nav-item <%= current_page?(user_profile_path)? "active" : "" %>">
  <%= link_to("Meu perfil", user_profile_path, class: "nav-link") %>
</li>

- config/routes.rb
namespace :user do
  get 'profile', to: "profile#show"
end

- criar: app/controllers/user/profile_controller.rb
class User::ProfileController < UserController
  def show
  end
end

- criar: app/views/user/profile/show.html.erb
# template de estático de base
<div class="row">
  <div class="col-lg-6">
    <div class="card">
      <h5 class="card-header">Mike Jefferson</h5>
      <div class="card-body">
        Email:<p class="card-text text-muted">mike@jefferson.com</p>
        Telefone:<p class="card-text text-muted">949004900</p>
      </div>
    </div>
  </div>
  <div class="col-lg-6">
    <div class="card">
      <div class="card-body">
        <form>
          <div class="form-group">
            <label for="exampleInputEmail1">Texto</label>
            <input type="text" class="form-control" id="exampleInputEmail1" placeholder="Digite seu texto...">
          </div>
          <button type="submit" class="btn btn-primary">Submit</button>
        </form>
      </div>
    </div>

    <div class="card text-white bg-dark mb-3 mt-3">
      <div class="card-header">Mike Jefferson</div>
      <div class="card-body">
        <small class="text-muted">27/09/2020 - 15:33</small>
        <p class="card-text">Duis commodo condimentum justo, a finibus metus accumsan ut. Quisque a erat et libero molestie commodo.
          Aenean efficitur sem sed pretium feugiat. Nunc posuere, lacus et tristique aliquam, metus risus bibendum elit,
          eu blandit tellus massa a elit. Cras ornare massa eu dui tristique congue. Sed placerat semper est sed interdum.
          Pellentesque libero augue, efficitur in sapien at, viverra maximus nisi. Vestibulum interdum laoreet ipsum
          vitae feugiat. Mauris feugiat euismod nisl, nec feugiat lacus gravida a. Cras eros augue, suscipit at
          condimentum ac, tempus ut metus.</p>
      </div>
    </div>
  </div>
</div>

7.3)

- app/controllers/user/profile_controller.rb

class User::ProfileController < UserController
  def show
    @post = Post.new
  end
end

- app/models/post.rb
validates :body, presence: true

- app/views/user/profile/show.html.erb
<div class="row">
  <div class="col-lg-6">
    <div class="card">
      <h5 class="card-header"><%= image_tag(current_user.avatar, class: 'ui-w-100-forced rounded-circle mr-3', style: 'width: 90px; height: 90px') %> <%= current_user.name %></h5>
      <div class="card-body">
        Email:<p class="card-text text-muted"><%= current_user.email %></p>
        Telefone:<p class="card-text text-muted"><%= current_user.phone %></p>
      </div>
    </div>
  </div>
  <div class="col-lg-6">
    <div class="card">
      <div class="card-body">
        <%= form_with(model: [:user, @post], local: true) do |f| %>
          <%= render("layouts/form_errors", record: @post) %>
          <div class="form-group">
            <label for="exampleInputEmail1">Texto</label>
            <%= f.text_area :body, rows: 5, class: "form-control", placeholder: "Digite seu texto..." %>
          </div>
          <button type="submit" class="btn btn-primary">Postar</button>
        <% end %>
      </div>
    </div>

    <% current_user.posts.order(created_at: :desc).each do |post| %>
    <div class="card text-white bg-dark mb-3 mt-3">
      <div class="card-header"><%= post.user.name %></div>
      <div class="card-body">
        <small class="text-muted"><%= post.created_at.strftime("%d/%m/%Y %H:%M") %></small>
        <p class="card-text">
          <%= post.body %>
        </p>
      </div>
    </div>
    <% end %>
  </div>
</div>

- config/routes.rb
namespace :user do
  get 'profile', to: "profile#show"
  resources :posts, only: :create
end

- criar : app/controllers/user/posts_controller.rb
# O professor não mostrou este passo na aliqua
class User::PostsController < UserController
    skip_before_action :verify_authenticity_token, only: :like_toggle
  
    def create
      f_params = form_params.merge(user: current_user)
  
      @post = Post.new(f_params)      
  
      if @post.save
        redirect_to user_profile_path
      else
        render "user/profile/show"
      end
    end
  
    private
  
    def form_params
      params.require(:post).permit(:body)
    end
  
  end

7.4)

- app/views/layouts/admin/_header.html.erb
# adiciona o path correto para os posts do painel do admin
<li class="nav-item <%= current_page?(admin_posts_path)? "" : "" %>">
  <%= link_to("Posts", admin_posts_path, class: "nav-link") %>
</li>

- config/routes.rb

namespace :admin do
  #admin/posts
  root to: "home#index"
  resources :admins
  resources :users, only: :index
  resources :posts, only: [:index, :show] #
end

- criar app/controllers/admin/posts_controller.rb
class Admin::PostsController < AdminController    
  
  def index
    @posts = Post.order(created_at: :desc)
  end

  def show
    @post = Post.find(params[:id])
  end
end

- criar: app/views/admin/posts/index.html.erb
<h4>Posts</h4><br>

<table class="table table-dark">
  <thead>
    <tr>
      <th scope="col">#</th>
      <th scope="col">Texto</th>
      <th scope="col">Criador</th>
      <th scope="col">Criado em</th>
    </tr>
  </thead>
  <tbody>
  <% @posts.each do |post| %>
    <tr>
      <th scope="row"><%= post.id %></th>      
      <td><%= link_to post.body.truncate(30), admin_post_path(post) %></td>      
      <td><%= post.user.name %></td>
      <td><%= post.created_at.strftime("%d/%m/%Y %H:%M") %></td>
    </tr>  
  <% end %>
  </tbody>
</table>

- criar: app/views/admin/posts/show.html.erb
<h4>Post #<%= @post.id %></h4>
<div class="card text-white bg-dark mb-3 mt-3">
  <div class="card-header"><%= @post.user.name %></div>
  <div class="card-body">
  <small class="text-muted"><%= @post.created_at.strftime("%d/%m/%Y %H:%M") %></small>
  <p class="card-text">
    <%= @post.body %>
  </p>
  </div>
</div>

8.1)
- criar migration: 20210422214228_create_subscriptions.rb
>rails g migration create_subscriptions
class CreateSubscriptions < ActiveRecord::Migration[6.1]
  def change
    create_table :subscriptions do |t|
      
      t.references :followed, foreign_key: {to_table: :users}
      t.references :followed_by, foreign_key: {to_table: :users}

      t.timestamps
    end
  end
end

- criar: app/models/subscription.rb
class Subscription < ApplicationRecord
  
  belongs_to :followed, class: 'User'
  belongs_to :followed_by, class: 'User'
end

- app/models/user.rb
has_many :followers_subscriptions, foreign_key: :followed_id, class_name: 'Subscriptions'
has_many :followers, through: :followers_subscriptions, source: :followed_by

8.2)

- app/models/subscription.rb
belongs_to :followed, class_name: 'User'
  belongs_to :followed_by, class_name: 'User'

- app/models/user.rb
has_many :following_subscriptions, foreign_key: :followed_by_id, class_name: 'Subscription'
has_many :following, through: :following_subscriptions, source: :followed

- spec/factories/users.rb
factory :user do
  sequence(:name) { |c| "User#{c}"}
  sequence(:email){ |n| "user#{n}@mail.com"}
  phone {'999876543'}
  avatar {Rack::Test::UploadedFile.new(Rails.root.join("spec/support/test-avatar.png"), "image/png")}
  password {"123456"}
end

- cria: spec/models/subscription_spec.rb
require 'rails_helper'

RSpec.describe Subscription, type: :model do
  
  it "user can follow another user" do
    matt = FactoryBot.create(:user)
    puts(matt.name)
    bob = FactoryBot.create(:user)
    puts(bob.name)
    Subscription.create(followed: bob, followed_by: matt)  
  end
end

8.3)
- spec/models/subscription_spec.rb
it "user can follow another user" do
    matt = FactoryBot.create(:user)    
    bob = FactoryBot.create(:user)
    dave = FactoryBot.create(:user)    
    Subscription.create(followed: bob, followed_by: matt)
    Subscription.create(followed: bob, followed_by: dave)
    Subscription.create(followed: dave, followed_by: bob)    

    expect(bob.followers.count).to eql 2
    expect(bob.followers).to include dave

    expect(matt.following.count).to eql 1
    expect(matt.following).to include bob

    expect(bob.following.count).to eql 1
    expect(bob.following).to_not include matt

    expect(matt.followers.count).to eql 0
    expect(matt.followers).to_not include bob
  end

9)Ações de Seguir/Deixar de seguir um usuário - parte 1

9.1)
- app/controllers/user/profile_controller.rb
def potencial_to_follow
  @potencial_to_follow = User.where.not(id: current_user.following.pluck(:id)).where.not(id: current_user.id)
end

- app/views/layouts/user/_header.html.erb
<li class="nav-item <%= current_page?(user_potencial_to_follow_path)? "active" : "" %>">
  <%= link_to("Quem eu posso seguir", user_potencial_to_follow_path, class: "nav-link") %>
</li>

- config/routes.rb
namespace :user do
  get 'profile', to: "profile#show"
  get 'potencial_to_follow', to: "profile#potencial_to_follow"
  resources :posts, only: :create
end

- criar: app/views/user/profile/potencial_to_follow.html.erb
<div class="row">
  <% @potencial_to_follow.each do |user| %>
    <div class="col-lg-6">
      <div class="card">
        <h5 class="card-header"><%= image_tag(user.avatar, class: 'ui-w-100-forced rounded-circle mr-3', style: 'width: 90px; height: 90px') %> <%= user.name %></h5>
        <div class="card-body">
          Email:<p class="card-text text-muted"><%= user.email %></p>
          Telefone:<p class="card-text text-muted"><%= user.phone %></p>
        </div>
      </div>
    </div>
  <% end %>
</div>

9.2)

- app/controllers/user/profile_controller.rb
def potencial_to_follow
  @potencial_to_follow = User.where.not(id: current_user.following.pluck(:id)).where.not(id: current_user.id)    
end

- app/views/user/profile/potencial_to_follow.html.erb
<div class="row">
  <% @potencial_to_follow.each do |user| %>
    <div class="col-lg-3">
      <div class="card">
        <h5 class="card-header">
          <%= image_tag(user.avatar, class: 'ui-w-100-forced rounded-circle mr-3', style: 'width: 90px; height: 90px') %> <%= user.name %>
          <br><span style="font-size:14px;">Seguidores:</span> <span style="font-size:16px;" class="badge badge-info mr-3"><%= user.followers.count %></span>
          <span style="font-size:14px;">Seguindo:</span> <span style="font-size:16px;" class="badge badge-info"><%= user.following.count %></span>
        </h5>
        <div class="card-body">
          Email:<p class="card-text text-muted"><%= user.email %></p>
          Telefone:<p class="card-text text-muted"><%= user.phone %></p>
          <%= link_to 'Follow', user_follow_path(id: user.id), method: :post, class: 'btn btn-success' %>
        </div>        
      </div>
    </div>
  <% end %>
</div>

- config/routes.rb
namespace :user do
  get 'profile', to: "profile#show"
  get 'potencial_to_follow', to: "profile#potencial_to_follow"
  resources :posts, only: :create

  post 'follow/:id', to: "subscriptions#follow", as: :follow
end

- criar: app/controllers/user/subscriptions_controller.rb
class User::SubscriptionsController < UserController
  def follow
    user_to_follow = User.find_by(id: params[:id])
    Subscription.create(followed_by: current_user, followed: user_to_follow)
    redirect_to user_potencial_to_follow_path
  end
end

9.3)

- app/controllers/user/profile_controller.rb
def potencial_to_follow
  @potencial_to_follow = User.potencial_to_follow(current_user)
end

- app/models/user.rb
scope :potencial_to_follow, -> (user) { where.not(id: user.following.pluck(:id)).where.not(id: user.id) }

- criar: app/views/user/profile/_user_card_header.html.erb
<h5 class="card-header">
  <%= image_tag(user.avatar, class: 'ui-w-100-forced rounded-circle mr-3', style: 'width: 90px; height: 90px') %> <%= user.name %>
  <br><span style="font-size:14px;">Seguidores:</span> <span style="font-size:16px;" class="badge badge-info mr-3"><%= user.followers.count %></span>
  <span style="font-size:14px;">Seguindo:</span> <span style="font-size:16px;" class="badge badge-info"><%= user.following.count %></span>
</h5>

- app/views/user/profile/potencial_to_follow.html.erb
<%= render("user_card_header", user: user) %>

- app/views/user/profile/show.html.erb
<%= render("user_card_header", user: current_user) %>    

9.4)
- app/controllers/user/profile_controller.rb
def following
  @following = current_user.following
end

def followers
  @followers = current_user.followers
end

- app/controllers/user/subscriptions_controller.rb
def unfollow
  user = User.find_by(id: params[:id])

  subscription = Subscription.find_by(followed_by: current_user, followed: user)

  subscription.destroy
  redirect_to user_following_path
end

- app/views/layouts/user/_header.html.erb
<li class="nav-item <%= current_page?(user_followers_path)? "active" : "" %>">
  <%= link_to("Followers", user_followers_path, class: "nav-link") %>
</li>                
<li class="nav-item <%= current_page?(user_following_path)? "active" : "" %>">
  <%= link_to("Following", user_following_path, class: "nav-link") %>
</li>      

- config/routes.rb
namespace :user do
  get 'profile', to: "profile#show"
  get 'potencial_to_follow', to: "profile#potencial_to_follow"
  get 'following', to: "profile#following" #
  get 'followers', to: "profile#followers" #
  resources :posts, only: :create

  post 'follow/:id', to: "subscriptions#follow", as: :follow #
  post 'unfollow/:id', to: "subscriptions#unfollow", as: :unfollow #
end

- criar: app/views/user/profile/followers.html.erb
<div class="row">
  <% @followers.each do |user| %>
    <div class="col-lg-4">
      <div class="card">
        <%= render("user_card_header", user: user) %>        
        <div class="card-body">
          Email:<p class="card-text text-muted"><%= user.email %></p>
          Telefone:<p class="card-text text-muted"><%= user.phone %></p>          
        </div>        
      </div>
    </div>
  <% end %>
</div>

- criar: app/views/user/profile/following.html.erb
<div class="row">
  <% @following.each do |user| %>
    <div class="col-lg-4">
      <div class="card">
        <%= render("user_card_header", user: user) %>        
        <div class="card-body">
          Email:<p class="card-text text-muted"><%= user.email %></p>
          Telefone:<p class="card-text text-muted"><%= user.phone %></p>
          <%= link_to 'Deixar de Seguir', user_unfollow_path(user), method: :post, class: 'btn btn-secondary' %>
        </div>        
      </div>
    </div>
  <% end %>
</div>

9.5)

- app/views/admin/users/index.html.erb
<th scope="col">Seguindo</th>
<th scope="col">Seguidores</th>

<td><%= user.following.count %></td>
<td><%= user.followers.count %></td>

- app/views/user/profile/potencial_to_follow.html.erb
<div class="col-lg-4">

10) Timeline e tela de detalhes de outros usuários

10.1)

- app/controllers/user/timeline_controller.rb
def index
  ids = current_user.following.pluck(:id)
  ids << current_user.id
  @posts = Post.where(user_id: ids).order(created_at: :desc)
end

- criar partial: app/views/user/_post_card.html.erb
<div class="card text-white bg-dark mb-3 mt-3">
  <div class="card-header"><%= post.user.name %></div>
  <div class="card-body">
  <small class="text-muted"><%= post.created_at.strftime("%d/%m/%Y %H:%M") %></small>
  <p class="card-text">
    <%= post.body %>
  </p>
  </div>
</div>

- app/views/user/profile/show.html.erb
<% current_user.posts.order(created_at: :desc).each do |post| %>
  <%= render 'user/post_card', post: post %>
<% end %>

- app/views/user/timeline/index.html.erb
<div class="row">
  <div class="offset-2 col-lg-8">
    <% @posts.each do |post| %>
      <%= render 'user/post_card', post: post %>
    <% end %>  
  </div>
</div>

10.2)

- app/views/user/_post_card.html.erb
# 2:
<div class="card-header"><%= link_to post.user.name, post.user == current_user ? user_profile_path : user_user_path(post.user) %></div>

- deleted: app/views/user/profile/_user_card_header.html.erb

- criar: app/views/user/_user_card_header.html.erb
<h5 class="card-header">
  <%= image_tag(user.avatar, class: 'ui-w-100-forced rounded-circle mr-3', style: 'width: 90px; height: 90px') %> <%= user.name %>
  <br><span style="font-size:14px;">Seguidores:</span> <span style="font-size:16px;" class="badge badge-info mr-3"><%= user.followers.count %></span>
  <span style="font-size:14px;">Seguindo:</span> <span style="font-size:16px;" class="badge badge-info"><%= user.following.count %></span>
</h5>

- app/views/user/profile/show.html.erb
#4:
<%= render("user/user_card_header", user: current_user) %>      

- config/routes.rb
namespace :user do
  # ...
  resources :users, only: :show
  # ...
end

- criar: app/controllers/user/users_controller.rb
class User::UsersController < UserController
  def show
    @user = User.find(params[:id])
  end
end

- criar: app/views/user/users/show.html.erb
<div class="row">
  <div class="col-lg-6">
    <div class="card">
      <%= render("user/user_card_header", user: @user) %>      
      <div class="card-body">
        Email:<p class="card-text text-muted"><%= @user.email %></p>
        Telefone:<p class="card-text text-muted"><%= @user.phone %></p>
      </div>
    </div>
  </div>
  <div class="col-lg-6">
    <% @user.posts.order(created_at: :desc).each do |post| %>
      <%= render 'user/post_card', post: post %>
    <% end %>
  </div>
</div>

10.3)
- app/controllers/user/posts_controller.rb
def destroy
  # post = Post.find(params[:id])
  post = current_user.posts.find(params[:id])
  post.destroy
  redirect_to user_profile_path
end

- app/views/user/_post_card.html.erb
<div class="card text-white bg-dark mb-3 mt-3">
  <div class="card-header">
    <%= link_to post.user.name, post.user == current_user ? user_profile_path : user_user_path(post.user) %>
    <% if post.user == current_user  %>
      <%= link_to user_post_path(post), method: :delete, class: 'close text-white' do %>
        <span aria-hidden="true">&times;</span>
      <% end %>
    <% end %>    
  </div>
  <div class="card-body">
    <small class="text-muted"><%= post.created_at.strftime("%d/%m/%Y %H:%M") %></small>
    <p class="card-text">
      <%= post.body %>
    </p>
  </div>
</div>

- app/views/user/_user_card_header.html.erb
<h5 class="card-header">
  <%= image_tag(user.avatar, class: 'ui-w-100-forced rounded-circle mr-3', style: 'width: 90px; height: 90px') %> 
  <%= link_to user.name, user == current_user ? user_profile_path : user_user_path(user) %>
  <br><span style="font-size:14px;">Seguidores:</span> <span style="font-size:16px;" class="badge badge-info mr-3"><%= user.followers.count %></span>
  <span style="font-size:14px;">Seguindo:</span> <span style="font-size:16px;" class="badge badge-info"><%= user.following.count %></span>
</h5>

- config/routes.rb
namespace :user do
  # ...
  resources :posts, only: [:create, :destroy]
  # ...
end

11) Ações de Curtir/Deixar de curtir um post

11.1)
>rails g migration create_likes

- db/migrate/20210423183349_create_likes.rb
class CreateLikes < ActiveRecord::Migration[6.1]
  def change
    create_table :likes do |t|

      t.references :user, foreign_key: true
      t.references :post, foreign_key: true

      t.timestamps
    end
  end
end

>rails db:migrate

- criar: app/models/like.rb
class Like < ApplicationRecord
  
  belongs_to :user
  belongs_to :post
end

- app/models/post.rb
has_many :likes

- criar: spec/models/like_spec.rb
require 'rails_helper'

RSpec.describe Like, type: :model do
  
  it "user likes a post" do
    matt = FactoryBot.create(:user)    
    bob = FactoryBot.create(:user)
    dave = FactoryBot.create(:user)  
    
    post = FactoryBot.create(:post, user: dave)

    Like.create(user: bob, post: post)

    # Subscription.create(followed: bob, followed_by: matt)
     
    expect(post.likes.count).to eql 1
    expect(post.likes.first.user).to eql bob

    Like.create(user: matt, post: post)

    expect(post.likes.count).to eql 2
    expect(post.likes.last.user).to eql matt

    Like.find_by(post: post, user: bob).destroy

    expect(post.likes.count).to eql 1
    expect(post.likes.first.user).to eql matt
  end
end

- app/views/layouts/application.html.erb
<script src="https://kit.fontawesome.com/83ac447d60.js" crossorigin="anonymous"></script>

- app/views/user/_post_card.html.erb
<i style="font-size:18px;" class="far fa-thumbs-up"></i><span class="ml-2">25</span>

11.2)

- app/models/post.rb
def liked_by_user?(user)
  likes.where(user: user).present?
end

- app/views/user/_post_card.html.erb
<%= link_to nil, {class: "like-toggle", id: post.id, remote: true} do %>    
  <i style="font-size:18px; color: <%= post.liked_by_user?(current_user) ? '#80c0ff' : '#fff' %>" class="far fa-thumbs-up"></i>
<% end %>
<span class="ml-2"><%=post.likes.count %></span>
