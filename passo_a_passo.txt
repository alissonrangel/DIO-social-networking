1.1)
>rails new social_networking -d postgresql

gem 'devise'
>bundle install

>rails g devise:install
configs da devise

>rails g devise admin

>rails db:drop
>rails db:create

1.2)

>rails db:migrate

gem 'rspec-rails', '~>5.0.0'
>bundle install

>rails g rspec:install

>rails g rspec:model admin

criação de testes:
  it "admin is valid" do
    admin = Admin.new(email:'admin@admin.com', password:'123456')
    expect(admin.email).to eql 'admin@admin.com'
    expect(admin).to be_valid
  end

  it "admin is not valid" do
    admin = Admin.new(email:'admin@admin.com')
    expect(admin).to_not be_valid
  end

1.3)

cria as views especificadas da devise
>rails g devise:views -v registrations sessions

troca a view device/sessions/new pela do git hub do professor
adiciona as imagens do git hub do professor
estiliza a view application.html.erb:
  <html style="height: 100%">
  <body style="height: 100%">

1.4)

no db/seeds.rb
  Admin.create(email:'admin@admin.com', password:'123456')
  puts "admin created"
>rails db:seed

altero application.html.erb 
  <body style="height: 100%">
    <%= notice %>
    <%= alert %>
    <%= content_for?(:content) ? yield(:content) : yield %>
  </body>

adiciono a view admin.html.erb em layouts pelo git hub do professor
  <% content_for :content do %>
    <%= render "layouts/admin/header" %>
    <div class="container mt-5">
      <%= yield %>
    </div>
  <% end %>
  <%= render template: "layouts/application" %>

criar admin_controller.rb
  class AdminController < ApplicationController

    before_action :authenticate_admin

    def authenticate_admin
      redirect_to new_admin_session_path unless current_admin?
    end

    def current_admin? # ? -> retorna um booleano
      if current_admin.present?
        true
      else
        false
      end
    end

  end

1.5 e 1.6)

routes

  Rails.application.routes.draw do
    devise_for :admins, skip: [:registrations], controllers: {sessions: 'admins/sessions' }
    # For details on the DSL available within this file, see https://guides.rubyonrails.org/routing.html
    
    namespace :admin do
      #admin/posts
      root to: "home#index"
    end
    
  end

-cria controllers/admin/home_controller.rb
  class Admin::HomeController < AdminController
    def index
    end
  end

-cria controllers/admins/sessions_controller.rb
  class Admins::SessionsController < Devise::SessionsController

    def after_sign_out_path_for(admin)
      new_admin_session_path
    end

  end

-cria views/admin/home/index.html.erb
  <h2>Seja bem-vindo ao painel administrativo</h2>

-cria views/layouts/admin/_header.html.erb
  <nav class="navbar navbar-expand-sm bg-dark navbar-dark">
    <div class="container">
      <ul class="navbar-nav">
        <li class="nav-item <%= current_page?(admin_root_path)? "active" : "" %>">
          <%= link_to("Home", admin_root_path, class: "nav-link") %>
        </li>
        <li class="nav-item <%= current_page?(admin_root_path)? "active" : "" %>">
          <%= link_to("Administradores", admin_root_path, class: "nav-link") %>
        </li>
        <li class="nav-item <%= current_page?(admin_root_path)? "active" : "" %>">
          <%= link_to("Usuários", admin_root_path, class: "nav-link") %>
        </li>
        <li class="nav-item <%= current_page?(admin_root_path)? "active" : "" %>">
          <%= link_to("Posts", admin_root_path, class: "nav-link") %>
        </li>
        
      </ul>
      <div class="nav-item d-flex">
        <ul class="navbar-nav">
          <li class="nav-item">
            <div class="py-2 mr-4" style="color:#fff;"><%= current_admin.email %></div>
          </li>
          <li class="nav-item">
            <%= link_to("Sair", destroy_admin_session_path, method: :delete, class: "nav-link")%>
          </li>
        </ul>
      </div>
    </div>
  </nav>

2.1)
user: <%= ENV.fetch("USER_PG") %>
password: <%= ENV.fetch("PASSWORD_PG") %>
port: 5432

-acrescentar em config/environments/production.rb
# Do not fallback to assets pipeline if a precompiled asset is missed.
  config.assets.compile = true
  config.serve_static_assets = true

>heroku apps:create dio-social-networking
>heroku buildpacks:add heroku/nodejs
>heroku buildpacks:add heroku/ruby 
>git push heroku main
>heroku run rails db:migrate
>heroku run rails db:seed


routes.rb
  namespace :admin do
    #admin/posts
    root to: "home#index"
    resources :admins
  end

criou migration para add name à tabela admins
  >rails g migration add_name_to_admins

  class AddNameToAdmins < ActiveRecord::Migration[6.1]
    def change
      add_column :admins, :name, :string
    end
  end

  >rails db:migrate

-atualiza os testes, acrescentando name, pois passou a ser obrig, pelo validates do model

  it "admin is valid" do
    admin = Admin.new(name: "Admin First", email:'admin@admin.com', password:'123456')

    expect(admin.email).to eql 'admin@admin.com'
    expect(admin).to be_valid
  end

-adiciona validates no models admin

  validates :name, presence: true

-cria controllers/admin/admins_controller.rb
  class Admin::AdminsController < AdminController
    def index
      @admins = Admin.all
    end
  end

-cria a view views/admin/admins/index.html.erb
  <h4>Admins</h4><br>

  <table class="table table-dark">
    <thead>
      <tr>
        <th scope="col">#</th>
        <th scope="col">Nome</th>
        <th scope="col">E-mail</th>
        <th scope="col">Criado em</th>
      </tr>
    </thead>
    <tbody>
    <% @admins.each do |admin| %>
      <tr>
        <th scope="row"><%= admin.id %></th>
        <td><%= admin.name %></td>
        <td><%= admin.email %></td>
        <td><%= admin.created_at %></td>
      </tr>  
    <% end %>
    </tbody>
  </table>

2.2)
  <li class="nav-item <%= current_page?(admin_admins_path)? "active" : "" %>">
    <%= link_to("Administradores", admin_admins_path, class: "nav-link") %>
  </li>

2.3)

- admins_controller.rb
  def new
    @admin = Admin.new
  end

  private 

  def form_params
    params.require(:admin).permit(:name, :email, :password, :password_confirmation)
  end

- views/admin/admins/index.html.erb
<%= link_to 'New Admin', new_admin_admin_path, class: 'btn btn-link' %>

-criar views/admin/admins/_form.html.erb
<div class="card" style="background-color:#f6f6f6;">
  <div class="card-body">
    <%= form_with(model: [:admin, admin], local: true) do |f| %>
      <div class="form-group">
        <%= f.label :name %>
        <%= f.text_field :name , class: 'form-control'%>
      </div>
      <div class="form-group">
        <%= f.label :email %>
        <%= f.email_field :email , class: 'form-control'%>
      </div>
      <div class="form-row">
        <div class="col-6">
            <div class="form-group">
                <%= f.label :password %>
                <%= f.password_field :password , class: 'form-control'%>
            </div>
        </div>
        <div class="col-6">
            <div class="form-group">
                <%= f.label :password_confirmation %>
                <%= f.password_field :password_confirmation , class: 'form-control'%>
            </div>
        </div>
      </div>
      <button type="submit" class="btn btn-primary">Salvar</button>
    <% end %>      
  </div>
</div>

-criar views/admin/admins/new.html.erb
<h2>Novo Administrador</h2>

<%= render 'form', admin: @admin %>

2.4)

-controllers/admin/admins_controller.rb
  def create
    @admin = Admin.new(form_params)

    if @admin.save
      redirect_to admin_admins_path
    else
      render :new
    end
  end

  def edit
    @admin = Admin.find(params[:id])
  end

-views/admin/admins/_form.html.erb
  #colocado dentro do form
  <%= render 'layouts/form_errors', record: admin%> 

- views/admin/admins/index.html.erb

  # acrescenta uma coluna na tabela
  <td><%= link_to 'Editar', edit_admin_admin_path(admin), class: 'btn btn-warning btn-sm' %></td>

- cria views/admin/admins/edit.html.erb
  <h2>Editar Administrador #<%= @admin.id %></h2>
  <%= render 'form', admin: @admin %>

- cria views/layouts/_form_errors.html.erb
  # cria essa partial que é colocada dentro do _form
  <% if record && record.errors.any? %>
    <div class="alert alert-danger" role="alert">
      <h4 class="alert-heading"><%= t('.error_on_save') %></h4>
      <ul>
      <% record.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

3.5) deletar admin

- controllers/admin/admins_controller.rb
  def update
    @admin = Admin.find(params[:id])
    params = form_params.to_h

    # se password não preenchido
    params = params.except!(:password, :password_confirmation) if params[:password].blank?
    
    if @admin.update(params)
      redirect_to admin_admins_path
    else
      render :edit
    end
  end

  def destroy
    @admin = Admin.find(params[:id])
    @admin.destroy
    redirect_to admin_admins_path
  end

- views/admin/admins/_form.html.erb
  # após o button de submit
  <%= link_to 'Voltar', admin_admins_path, class: 'btn btn-secondary ml-3' %>

- views/admin/admins/index.html.erb

  # adiciona mais uma coluna
  <td><%= link_to 'Deletar', admin_admin_path(admin), method: :delete, data: {confirm:"Are you sure?"}, class: 'btn btn-danger btn-sm' %></td>

3.6.a)
- controllers/admin/admins_controller.rb
  # refatoração, para retirar código repetido
  before_action :set_admin, only:[:edit, :update, :destroy]

  def edit
    # @admin = Admin.find(params[:id])
    # executada pelo set_admin via before_action
  end

  def update
    # @admin = Admin.find(params[:id])
    # executada pelo set_admin via before_action

    params = form_params.to_h
    params = params.except!(:password, :password_confirmation) if params[:password].blank?
    
    if @admin.update(params)
      redirect_to admin_admins_path
    else
      render :edit
    end
  end

  def destroy
    # @admin = Admin.find(params[:id])
    # executada pelo set_admin via before_action
    
    @admin.destroy
    redirect_to admin_admins_path
  end

  private
  def set_admin
    @admin = Admin.find(params[:id])
  end

4.1)

- Procfile
# reinicia o servidor remoto
web: bundle exec puma -C config/puma.rb

# faz as migrações
release: bundle exec rake db:migrate

- app/assets/images/test-avatar.png
- spec/support/test-avatar.png

>rais g devise user
cria o model e os tests no rspec
>rails g migration add_fields_to_users
>rails db:migrate

>rails active_storage:install
>rails db:migrate

- app/models/user.rb
  validates :phone, :name, :avatar, presence: true
  has_one_attached :avatar

- spec/rails_helper.rb 
  # no final do arquivo, após o end
  class Rack::Test::UploadedFile
    attr_reader :headers
  end

4.2) testes do model user

- testes do user
- spec/models/user_spec.rb

  it "user is valid" do
    user = User.new(
      name: 'Alisson',
      email: 'alisson@mail.com',
      phone: '999876543',
      avatar: fixture_file_upload(Rails.root.join("spec","support","test-avatar.png"), "image/png"),
      password: "123456"
    )

    expect(user).to be_valid
  end

  it "user is not valid" do
    user = User.new(
      name: 'Alisson',
      email: 'alisson@mail.com',
      phone: '999876543',
      password: "123456"
    )

    expect(user).to_not be_valid
  end

  it "user should have a name" do
    user = User.new(
      
      email: 'alisson@mail.com',
      phone: '999876543',
      password: "123456",
      avatar: fixture_file_upload(Rails.root.join("spec","support","test-avatar.png"), "image/png")
    )

    expect(user).to_not be_valid
  end

4.3) FactoryBot

- gemfile
  gem 'factory_bot_rails'
>bundle install

- criar spec/factories/users.rb
FactoryBot.define do
  factory :user do
    name { 'Alisson'}
    email {'alisson@mail.com'}
    phone {'999876543'}
    avatar {Rack::Test::UploadedFile.new(Rails.root.join("spec/support/test-avatar.png"), "image/png")}
    password {"123456"}
  end
end

Obs. Não consegui executar o FactoryBot no rails c, mas consegui no rspec

4.4)
- acrescentei: assets/images/login_bg2.jpeg

- alterei views/devise/sessions/new.html.erb
# para funcionar com user e admin, mas layouts diferentes do mesmo arquivo

#1
<div style="height: 100%!important;background-image: url('<%= resource_name == :admin ? image_path('login_bg.jpg') : image_path('login_bg2.jpg') %>'); background-size: cover">  

#9
<% if resource_name == :admin  %>
  <h5 class="text-center text-muted font-weight-normal mb-4">Acesso ao Painel Administrativo</h5>
<% end %>

#31
<% if resource_name == :user %>
  <%= link_to new_user_registration_path, class: 'd-flex justify-content-center align-items-center mt-4' do %>
    Cadastrar
  <% end %>
<% end %> 

5.1) Area privada do usuario na rede social

- app/models/user.rb ->tirei avatar para poder fazer um cadastro
# validates :phone, :name, :avatar, presence: true
  validates :phone, :name, presence: true

- routes.rb
  root to: "user/timeline#index"

  namespace :user do

  end

- app/controllers/user/timeline_controller
class User::TimelineController < UserController
    def index     
    end
end

- app/controllers/user_controller.rb
class UserController < ApplicationController
  before_action :authenticate_user

  def authenticate_user
    redirect_to new_user_session_path unless current_user
  end
end

- app/views/layouts/user.html.erb
<% content_for :content do %>
  <%= render "layouts/user/header" %>
  <div class="container mt-5">
    <%= yield %>
  </div>
<% end %>
<%= render template: "layouts/application" %>

- app/views/layouts/user/_header.html.erb
<nav class="navbar navbar-expand-sm bg-primary navbar-dark" style="background-color:#000080!important;">
  <div class="container" >
    <%= image_tag("logo.png", alt: "logo", class: 'navbar-brand', style: "height:40px;")%>
    <ul class="navbar-nav">
      <li class="nav-item <%= current_page?(root_path)? "active" : "" %>">
        <%= link_to("Timeline", root_path, class: "nav-link") %>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="#">Followers</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="#">Following</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="#">Quem eu posso seguir</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="#">Meu perfil</a>
      </li>
    </ul>
    <div class="nav-item d-flex">
      <ul class="navbar-nav">
        <li class="nav-item">
          <div class="py-2 mr-4" style="color:#fff;"><%= current_user.email %></div>
        </li>
        <li class="nav-item">
          <%= link_to("Sair", destroy_user_session_path, method: :delete, class: "nav-link")%>          
        </li>
      </ul>
    </div>
  </div>
</nav>

- app/views/user/timeline/index.html.erb
<h2>Seja bem-vindo à timeline</h2>

6.1)

- app/views/devise/registrations/new.html.erb
# altera para ser relativo a usuário e possuir os outros campos
# que foram acrescentados
<div style="height: 150%!important;background-image: url('<%= image_path('login_bg2.jpg') %>'); background-size: cover">
  <div class="offset-4 col-4 authentication-inner py-5">
    <div class="card">
      <div class="p-4 p-sm-5">
        <div class="d-flex justify-content-center align-items-center pb-2 mb-4">
          <%= image_tag('logo', style: 'height: 90px;') %>
        </div>

        <% if alert %>
          <div class="d-flex justify-content-center">
            <p class="text-danger"><%= alert %></p>
          </div>
        <% end %>
        <%= form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f| %>
          <%= render 'layouts/form_errors', record: resource %>
          <div class="form-group">
            <%= f.label :name, class: 'form-label' %>
            <%= f.text_field :name, autofocus: true, autocomplete: "name", class:" form-control" %>
          </div>
          <div class="form-group">
            <%= f.label :phone, class: 'form-label' %>
            <%= f.text_field :phone, autofocus: true, autocomplete: "phone", class:" form-control" %>
          </div>
          <div class="form-group">
            <%= f.label :avatar, class: 'form-label' %>
            <%= f.file_field(:avatar) %>
          </div>
          <div class="form-group">
            <%= f.label :email, class: 'form-label' %>
            <%= f.email_field :email, autofocus: true, autocomplete: "email", class:" form-control" %>
          </div>
          <div class="form-group">
            <%= f.label :password, class: 'form-label' %>
            <%= f.password_field :password, autocomplete: "current-password", class: "form-control" %>
          </div>
          <div class="d-flex justify-content-center align-items-center m-0">
            <%= f.submit 'Entrar', class: "btn btn-primary" %>
          </div>
        <% end %>        
        <%= link_to new_user_registration_path, class: 'd-flex justify-content-center align-items-center mt-4' do %>
          Cadastrar
        <% end %>         
      </div>
    </div>
  </div>
</div>